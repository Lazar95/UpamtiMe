#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UpamtiMe")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAchievement(Achievement instance);
    partial void UpdateAchievement(Achievement instance);
    partial void DeleteAchievement(Achievement instance);
    partial void InsertUsersCourse(UsersCourse instance);
    partial void UpdateUsersCourse(UsersCourse instance);
    partial void DeleteUsersCourse(UsersCourse instance);
    partial void InsertCard(Card instance);
    partial void UpdateCard(Card instance);
    partial void DeleteCard(Card instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertFriendship(Friendship instance);
    partial void UpdateFriendship(Friendship instance);
    partial void DeleteFriendship(Friendship instance);
    partial void InsertLevel(Level instance);
    partial void UpdateLevel(Level instance);
    partial void DeleteLevel(Level instance);
    partial void InsertSubcategory(Subcategory instance);
    partial void UpdateSubcategory(Subcategory instance);
    partial void DeleteSubcategory(Subcategory instance);
    partial void InsertUserCourseStatistic(UserCourseStatistic instance);
    partial void UpdateUserCourseStatistic(UserCourseStatistic instance);
    partial void DeleteUserCourseStatistic(UserCourseStatistic instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertUsersAchievement(UsersAchievement instance);
    partial void UpdateUsersAchievement(UsersAchievement instance);
    partial void DeleteUsersAchievement(UsersAchievement instance);
    partial void InsertUsersCard(UsersCard instance);
    partial void UpdateUsersCard(UsersCard instance);
    partial void DeleteUsersCard(UsersCard instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Data.Properties.Settings.Default.UpamtiMeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Achievement> Achievements
		{
			get
			{
				return this.GetTable<Achievement>();
			}
		}
		
		public System.Data.Linq.Table<UsersCourse> UsersCourses
		{
			get
			{
				return this.GetTable<UsersCourse>();
			}
		}
		
		public System.Data.Linq.Table<Card> Cards
		{
			get
			{
				return this.GetTable<Card>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Favorite> Favorites
		{
			get
			{
				return this.GetTable<Favorite>();
			}
		}
		
		public System.Data.Linq.Table<Friendship> Friendships
		{
			get
			{
				return this.GetTable<Friendship>();
			}
		}
		
		public System.Data.Linq.Table<Level> Levels
		{
			get
			{
				return this.GetTable<Level>();
			}
		}
		
		public System.Data.Linq.Table<Subcategory> Subcategories
		{
			get
			{
				return this.GetTable<Subcategory>();
			}
		}
		
		public System.Data.Linq.Table<UserCourseStatistic> UserCourseStatistics
		{
			get
			{
				return this.GetTable<UserCourseStatistic>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<UsersAchievement> UsersAchievements
		{
			get
			{
				return this.GetTable<UsersAchievement>();
			}
		}
		
		public System.Data.Linq.Table<UsersCard> UsersCards
		{
			get
			{
				return this.GetTable<UsersCard>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Achievements")]
	public partial class Achievement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _achievementID;
		
		private string _title;
		
		private string _description;
		
		private System.Data.Linq.Binary _image;
		
		private EntitySet<UsersAchievement> _UsersAchievements;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnachievementIDChanging(int value);
    partial void OnachievementIDChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnimageChanging(System.Data.Linq.Binary value);
    partial void OnimageChanged();
    #endregion
		
		public Achievement()
		{
			this._UsersAchievements = new EntitySet<UsersAchievement>(new Action<UsersAchievement>(this.attach_UsersAchievements), new Action<UsersAchievement>(this.detach_UsersAchievements));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_achievementID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int achievementID
		{
			get
			{
				return this._achievementID;
			}
			set
			{
				if ((this._achievementID != value))
				{
					this.OnachievementIDChanging(value);
					this.SendPropertyChanging();
					this._achievementID = value;
					this.SendPropertyChanged("achievementID");
					this.OnachievementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(400)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Achievement_UsersAchievement", Storage="_UsersAchievements", ThisKey="achievementID", OtherKey="achievementID")]
		public EntitySet<UsersAchievement> UsersAchievements
		{
			get
			{
				return this._UsersAchievements;
			}
			set
			{
				this._UsersAchievements.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersAchievements(UsersAchievement entity)
		{
			this.SendPropertyChanging();
			entity.Achievement = this;
		}
		
		private void detach_UsersAchievements(UsersAchievement entity)
		{
			this.SendPropertyChanging();
			entity.Achievement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersCourses")]
	public partial class UsersCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _usersCoursesID;
		
		private int _userID;
		
		private int _courseID;
		
		private System.DateTime _startDate;
		
		private float _score;
		
		private System.Nullable<System.DateTime> _lastPlayed;
		
		private float _thisWeekScore;
		
		private float _thisMonthScore;
		
		private EntitySet<UserCourseStatistic> _UserCourseStatistics;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusersCoursesIDChanging(int value);
    partial void OnusersCoursesIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OncourseIDChanging(int value);
    partial void OncourseIDChanged();
    partial void OnstartDateChanging(System.DateTime value);
    partial void OnstartDateChanged();
    partial void OnscoreChanging(float value);
    partial void OnscoreChanged();
    partial void OnlastPlayedChanging(System.Nullable<System.DateTime> value);
    partial void OnlastPlayedChanged();
    partial void OnthisWeekScoreChanging(float value);
    partial void OnthisWeekScoreChanged();
    partial void OnthisMonthScoreChanging(float value);
    partial void OnthisMonthScoreChanged();
    #endregion
		
		public UsersCourse()
		{
			this._UserCourseStatistics = new EntitySet<UserCourseStatistic>(new Action<UserCourseStatistic>(this.attach_UserCourseStatistics), new Action<UserCourseStatistic>(this.detach_UserCourseStatistics));
			this._Course = default(EntityRef<Course>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usersCoursesID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int usersCoursesID
		{
			get
			{
				return this._usersCoursesID;
			}
			set
			{
				if ((this._usersCoursesID != value))
				{
					this.OnusersCoursesIDChanging(value);
					this.SendPropertyChanging();
					this._usersCoursesID = value;
					this.SendPropertyChanged("usersCoursesID");
					this.OnusersCoursesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="Int NOT NULL")]
		public int courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseIDChanging(value);
					this.SendPropertyChanging();
					this._courseID = value;
					this.SendPropertyChanged("courseID");
					this.OncourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startDate", DbType="DateTime NOT NULL")]
		public System.DateTime startDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if ((this._startDate != value))
				{
					this.OnstartDateChanging(value);
					this.SendPropertyChanging();
					this._startDate = value;
					this.SendPropertyChanged("startDate");
					this.OnstartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score", DbType="Real NOT NULL")]
		public float score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastPlayed", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastPlayed
		{
			get
			{
				return this._lastPlayed;
			}
			set
			{
				if ((this._lastPlayed != value))
				{
					this.OnlastPlayedChanging(value);
					this.SendPropertyChanging();
					this._lastPlayed = value;
					this.SendPropertyChanged("lastPlayed");
					this.OnlastPlayedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thisWeekScore", DbType="Real NOT NULL")]
		public float thisWeekScore
		{
			get
			{
				return this._thisWeekScore;
			}
			set
			{
				if ((this._thisWeekScore != value))
				{
					this.OnthisWeekScoreChanging(value);
					this.SendPropertyChanging();
					this._thisWeekScore = value;
					this.SendPropertyChanged("thisWeekScore");
					this.OnthisWeekScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thisMonthScore", DbType="Real NOT NULL")]
		public float thisMonthScore
		{
			get
			{
				return this._thisMonthScore;
			}
			set
			{
				if ((this._thisMonthScore != value))
				{
					this.OnthisMonthScoreChanging(value);
					this.SendPropertyChanging();
					this._thisMonthScore = value;
					this.SendPropertyChanged("thisMonthScore");
					this.OnthisMonthScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersCourse_UserCourseStatistic", Storage="_UserCourseStatistics", ThisKey="usersCoursesID", OtherKey="userCourseID")]
		public EntitySet<UserCourseStatistic> UserCourseStatistics
		{
			get
			{
				return this._UserCourseStatistics;
			}
			set
			{
				this._UserCourseStatistics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_UsersCourse", Storage="_Course", ThisKey="courseID", OtherKey="courseID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.UsersCourses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.UsersCourses.Add(this);
						this._courseID = value.courseID;
					}
					else
					{
						this._courseID = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersCourse", Storage="_User", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersCourses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersCourses.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserCourseStatistics(UserCourseStatistic entity)
		{
			this.SendPropertyChanging();
			entity.UsersCourse = this;
		}
		
		private void detach_UserCourseStatistics(UserCourseStatistic entity)
		{
			this.SendPropertyChanging();
			entity.UsersCourse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cards")]
	public partial class Card : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _cardID;
		
		private string _question;
		
		private string _answer;
		
		private string _description;
		
		private System.Data.Linq.Binary _image;
		
		private int _levelID;
		
		private int _number;
		
		private EntitySet<UsersCard> _UsersCards;
		
		private EntityRef<Level> _Level;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncardIDChanging(int value);
    partial void OncardIDChanged();
    partial void OnquestionChanging(string value);
    partial void OnquestionChanged();
    partial void OnanswerChanging(string value);
    partial void OnanswerChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnimageChanging(System.Data.Linq.Binary value);
    partial void OnimageChanged();
    partial void OnlevelIDChanging(int value);
    partial void OnlevelIDChanged();
    partial void OnnumberChanging(int value);
    partial void OnnumberChanged();
    #endregion
		
		public Card()
		{
			this._UsersCards = new EntitySet<UsersCard>(new Action<UsersCard>(this.attach_UsersCards), new Action<UsersCard>(this.detach_UsersCards));
			this._Level = default(EntityRef<Level>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int cardID
		{
			get
			{
				return this._cardID;
			}
			set
			{
				if ((this._cardID != value))
				{
					this.OncardIDChanging(value);
					this.SendPropertyChanging();
					this._cardID = value;
					this.SendPropertyChanged("cardID");
					this.OncardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question", DbType="NVarChar(200)")]
		public string question
		{
			get
			{
				return this._question;
			}
			set
			{
				if ((this._question != value))
				{
					this.OnquestionChanging(value);
					this.SendPropertyChanging();
					this._question = value;
					this.SendPropertyChanged("question");
					this.OnquestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string answer
		{
			get
			{
				return this._answer;
			}
			set
			{
				if ((this._answer != value))
				{
					this.OnanswerChanging(value);
					this.SendPropertyChanging();
					this._answer = value;
					this.SendPropertyChanged("answer");
					this.OnanswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(400)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_levelID", DbType="Int NOT NULL")]
		public int levelID
		{
			get
			{
				return this._levelID;
			}
			set
			{
				if ((this._levelID != value))
				{
					if (this._Level.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlevelIDChanging(value);
					this.SendPropertyChanging();
					this._levelID = value;
					this.SendPropertyChanged("levelID");
					this.OnlevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int NOT NULL")]
		public int number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_UsersCard", Storage="_UsersCards", ThisKey="cardID", OtherKey="cardID")]
		public EntitySet<UsersCard> UsersCards
		{
			get
			{
				return this._UsersCards;
			}
			set
			{
				this._UsersCards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Level_Card", Storage="_Level", ThisKey="levelID", OtherKey="levelID", IsForeignKey=true)]
		public Level Level
		{
			get
			{
				return this._Level.Entity;
			}
			set
			{
				Level previousValue = this._Level.Entity;
				if (((previousValue != value) 
							|| (this._Level.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Level.Entity = null;
						previousValue.Cards.Remove(this);
					}
					this._Level.Entity = value;
					if ((value != null))
					{
						value.Cards.Add(this);
						this._levelID = value.levelID;
					}
					else
					{
						this._levelID = default(int);
					}
					this.SendPropertyChanged("Level");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersCards(UsersCard entity)
		{
			this.SendPropertyChanging();
			entity.Card = this;
		}
		
		private void detach_UsersCards(UsersCard entity)
		{
			this.SendPropertyChanging();
			entity.Card = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _categoryID;
		
		private string _name;
		
		private EntitySet<Course> _Courses;
		
		private EntitySet<Subcategory> _Subcategories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncategoryIDChanging(int value);
    partial void OncategoryIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Category()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._Subcategories = new EntitySet<Subcategory>(new Action<Subcategory>(this.attach_Subcategories), new Action<Subcategory>(this.detach_Subcategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int categoryID
		{
			get
			{
				return this._categoryID;
			}
			set
			{
				if ((this._categoryID != value))
				{
					this.OncategoryIDChanging(value);
					this.SendPropertyChanging();
					this._categoryID = value;
					this.SendPropertyChanged("categoryID");
					this.OncategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Course", Storage="_Courses", ThisKey="categoryID", OtherKey="categoryID")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Subcategory", Storage="_Subcategories", ThisKey="categoryID", OtherKey="categoryID")]
		public EntitySet<Subcategory> Subcategories
		{
			get
			{
				return this._Subcategories;
			}
			set
			{
				this._Subcategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
		
		private void attach_Subcategories(Subcategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Subcategories(Subcategory entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _courseID;
		
		private string _name;
		
		private int _categoryID;
		
		private System.Nullable<int> _subcategoryID;
		
		private int _participantCount;
		
		private int _numberOfCards;
		
		private int _creatorID;
		
		private System.Nullable<int> _rating;
		
		private string _description;
		
		private System.Data.Linq.Binary _image;
		
		private EntitySet<UsersCourse> _UsersCourses;
		
		private EntitySet<Level> _Levels;
		
		private EntityRef<Category> _Category;
		
		private EntityRef<Subcategory> _Subcategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncourseIDChanging(int value);
    partial void OncourseIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncategoryIDChanging(int value);
    partial void OncategoryIDChanged();
    partial void OnsubcategoryIDChanging(System.Nullable<int> value);
    partial void OnsubcategoryIDChanged();
    partial void OnparticipantCountChanging(int value);
    partial void OnparticipantCountChanged();
    partial void OnnumberOfCardsChanging(int value);
    partial void OnnumberOfCardsChanged();
    partial void OncreatorIDChanging(int value);
    partial void OncreatorIDChanged();
    partial void OnratingChanging(System.Nullable<int> value);
    partial void OnratingChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnimageChanging(System.Data.Linq.Binary value);
    partial void OnimageChanged();
    #endregion
		
		public Course()
		{
			this._UsersCourses = new EntitySet<UsersCourse>(new Action<UsersCourse>(this.attach_UsersCourses), new Action<UsersCourse>(this.detach_UsersCourses));
			this._Levels = new EntitySet<Level>(new Action<Level>(this.attach_Levels), new Action<Level>(this.detach_Levels));
			this._Category = default(EntityRef<Category>);
			this._Subcategory = default(EntityRef<Subcategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					this.OncourseIDChanging(value);
					this.SendPropertyChanging();
					this._courseID = value;
					this.SendPropertyChanged("courseID");
					this.OncourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryID", DbType="Int NOT NULL")]
		public int categoryID
		{
			get
			{
				return this._categoryID;
			}
			set
			{
				if ((this._categoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryIDChanging(value);
					this.SendPropertyChanging();
					this._categoryID = value;
					this.SendPropertyChanged("categoryID");
					this.OncategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subcategoryID", DbType="Int")]
		public System.Nullable<int> subcategoryID
		{
			get
			{
				return this._subcategoryID;
			}
			set
			{
				if ((this._subcategoryID != value))
				{
					if (this._Subcategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubcategoryIDChanging(value);
					this.SendPropertyChanging();
					this._subcategoryID = value;
					this.SendPropertyChanged("subcategoryID");
					this.OnsubcategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_participantCount", DbType="Int NOT NULL")]
		public int participantCount
		{
			get
			{
				return this._participantCount;
			}
			set
			{
				if ((this._participantCount != value))
				{
					this.OnparticipantCountChanging(value);
					this.SendPropertyChanging();
					this._participantCount = value;
					this.SendPropertyChanged("participantCount");
					this.OnparticipantCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numberOfCards", DbType="Int NOT NULL")]
		public int numberOfCards
		{
			get
			{
				return this._numberOfCards;
			}
			set
			{
				if ((this._numberOfCards != value))
				{
					this.OnnumberOfCardsChanging(value);
					this.SendPropertyChanging();
					this._numberOfCards = value;
					this.SendPropertyChanged("numberOfCards");
					this.OnnumberOfCardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creatorID", DbType="Int NOT NULL")]
		public int creatorID
		{
			get
			{
				return this._creatorID;
			}
			set
			{
				if ((this._creatorID != value))
				{
					this.OncreatorIDChanging(value);
					this.SendPropertyChanging();
					this._creatorID = value;
					this.SendPropertyChanged("creatorID");
					this.OncreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rating", DbType="Int")]
		public System.Nullable<int> rating
		{
			get
			{
				return this._rating;
			}
			set
			{
				if ((this._rating != value))
				{
					this.OnratingChanging(value);
					this.SendPropertyChanging();
					this._rating = value;
					this.SendPropertyChanged("rating");
					this.OnratingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(500)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_UsersCourse", Storage="_UsersCourses", ThisKey="courseID", OtherKey="courseID")]
		public EntitySet<UsersCourse> UsersCourses
		{
			get
			{
				return this._UsersCourses;
			}
			set
			{
				this._UsersCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Level", Storage="_Levels", ThisKey="courseID", OtherKey="courseID")]
		public EntitySet<Level> Levels
		{
			get
			{
				return this._Levels;
			}
			set
			{
				this._Levels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Course", Storage="_Category", ThisKey="categoryID", OtherKey="categoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._categoryID = value.categoryID;
					}
					else
					{
						this._categoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subcategory_Course", Storage="_Subcategory", ThisKey="subcategoryID", OtherKey="subcategoryID", IsForeignKey=true)]
		public Subcategory Subcategory
		{
			get
			{
				return this._Subcategory.Entity;
			}
			set
			{
				Subcategory previousValue = this._Subcategory.Entity;
				if (((previousValue != value) 
							|| (this._Subcategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subcategory.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Subcategory.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._subcategoryID = value.subcategoryID;
					}
					else
					{
						this._subcategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Subcategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersCourses(UsersCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_UsersCourses(UsersCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_Levels(Level entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Levels(Level entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Favorites")]
	public partial class Favorite
	{
		
		private int _favoritesID;
		
		private int _courseID;
		
		private int _userID;
		
		public Favorite()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_favoritesID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int favoritesID
		{
			get
			{
				return this._favoritesID;
			}
			set
			{
				if ((this._favoritesID != value))
				{
					this._favoritesID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="Int NOT NULL")]
		public int courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					this._courseID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this._userID = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Friendships")]
	public partial class Friendship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _friendshipID;
		
		private int _user1ID;
		
		private int _user2ID;
		
		private EntityRef<User> _User;
		
		private EntityRef<User> _User1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnfriendshipIDChanging(int value);
    partial void OnfriendshipIDChanged();
    partial void Onuser1IDChanging(int value);
    partial void Onuser1IDChanged();
    partial void Onuser2IDChanging(int value);
    partial void Onuser2IDChanged();
    #endregion
		
		public Friendship()
		{
			this._User = default(EntityRef<User>);
			this._User1 = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_friendshipID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int friendshipID
		{
			get
			{
				return this._friendshipID;
			}
			set
			{
				if ((this._friendshipID != value))
				{
					this.OnfriendshipIDChanging(value);
					this.SendPropertyChanging();
					this._friendshipID = value;
					this.SendPropertyChanged("friendshipID");
					this.OnfriendshipIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user1ID", DbType="Int NOT NULL")]
		public int user1ID
		{
			get
			{
				return this._user1ID;
			}
			set
			{
				if ((this._user1ID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser1IDChanging(value);
					this.SendPropertyChanging();
					this._user1ID = value;
					this.SendPropertyChanged("user1ID");
					this.Onuser1IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_user2ID", DbType="Int NOT NULL")]
		public int user2ID
		{
			get
			{
				return this._user2ID;
			}
			set
			{
				if ((this._user2ID != value))
				{
					if (this._User1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onuser2IDChanging(value);
					this.SendPropertyChanging();
					this._user2ID = value;
					this.SendPropertyChanged("user2ID");
					this.Onuser2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friendship", Storage="_User", ThisKey="user1ID", OtherKey="userID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Friendships.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Friendships.Add(this);
						this._user1ID = value.userID;
					}
					else
					{
						this._user1ID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friendship1", Storage="_User1", ThisKey="user2ID", OtherKey="userID", IsForeignKey=true)]
		public User User1
		{
			get
			{
				return this._User1.Entity;
			}
			set
			{
				User previousValue = this._User1.Entity;
				if (((previousValue != value) 
							|| (this._User1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User1.Entity = null;
						previousValue.Friendships1.Remove(this);
					}
					this._User1.Entity = value;
					if ((value != null))
					{
						value.Friendships1.Add(this);
						this._user2ID = value.userID;
					}
					else
					{
						this._user2ID = default(int);
					}
					this.SendPropertyChanged("User1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Levels")]
	public partial class Level : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _levelID;
		
		private int _type;
		
		private string _name;
		
		private int _courseID;
		
		private int _number;
		
		private int _icon;
		
		private int _color;
		
		private EntitySet<Card> _Cards;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnlevelIDChanging(int value);
    partial void OnlevelIDChanged();
    partial void OntypeChanging(int value);
    partial void OntypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncourseIDChanging(int value);
    partial void OncourseIDChanged();
    partial void OnnumberChanging(int value);
    partial void OnnumberChanged();
    partial void OniconChanging(int value);
    partial void OniconChanged();
    partial void OncolorChanging(int value);
    partial void OncolorChanged();
    #endregion
		
		public Level()
		{
			this._Cards = new EntitySet<Card>(new Action<Card>(this.attach_Cards), new Action<Card>(this.detach_Cards));
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_levelID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int levelID
		{
			get
			{
				return this._levelID;
			}
			set
			{
				if ((this._levelID != value))
				{
					this.OnlevelIDChanging(value);
					this.SendPropertyChanging();
					this._levelID = value;
					this.SendPropertyChanged("levelID");
					this.OnlevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="Int NOT NULL")]
		public int type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_courseID", DbType="Int NOT NULL")]
		public int courseID
		{
			get
			{
				return this._courseID;
			}
			set
			{
				if ((this._courseID != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncourseIDChanging(value);
					this.SendPropertyChanging();
					this._courseID = value;
					this.SendPropertyChanged("courseID");
					this.OncourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_number", DbType="Int NOT NULL")]
		public int number
		{
			get
			{
				return this._number;
			}
			set
			{
				if ((this._number != value))
				{
					this.OnnumberChanging(value);
					this.SendPropertyChanging();
					this._number = value;
					this.SendPropertyChanged("number");
					this.OnnumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_icon", DbType="Int NOT NULL")]
		public int icon
		{
			get
			{
				return this._icon;
			}
			set
			{
				if ((this._icon != value))
				{
					this.OniconChanging(value);
					this.SendPropertyChanging();
					this._icon = value;
					this.SendPropertyChanged("icon");
					this.OniconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_color", DbType="Int NOT NULL")]
		public int color
		{
			get
			{
				return this._color;
			}
			set
			{
				if ((this._color != value))
				{
					this.OncolorChanging(value);
					this.SendPropertyChanging();
					this._color = value;
					this.SendPropertyChanged("color");
					this.OncolorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Level_Card", Storage="_Cards", ThisKey="levelID", OtherKey="levelID")]
		public EntitySet<Card> Cards
		{
			get
			{
				return this._Cards;
			}
			set
			{
				this._Cards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Level", Storage="_Course", ThisKey="courseID", OtherKey="courseID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Levels.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Levels.Add(this);
						this._courseID = value.courseID;
					}
					else
					{
						this._courseID = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.Level = this;
		}
		
		private void detach_Cards(Card entity)
		{
			this.SendPropertyChanging();
			entity.Level = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subcategories")]
	public partial class Subcategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _subcategoryID;
		
		private string _name;
		
		private int _categoryID;
		
		private EntitySet<Course> _Courses;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsubcategoryIDChanging(int value);
    partial void OnsubcategoryIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OncategoryIDChanging(int value);
    partial void OncategoryIDChanged();
    #endregion
		
		public Subcategory()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subcategoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int subcategoryID
		{
			get
			{
				return this._subcategoryID;
			}
			set
			{
				if ((this._subcategoryID != value))
				{
					this.OnsubcategoryIDChanging(value);
					this.SendPropertyChanging();
					this._subcategoryID = value;
					this.SendPropertyChanged("subcategoryID");
					this.OnsubcategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_categoryID", DbType="Int NOT NULL")]
		public int categoryID
		{
			get
			{
				return this._categoryID;
			}
			set
			{
				if ((this._categoryID != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncategoryIDChanging(value);
					this.SendPropertyChanging();
					this._categoryID = value;
					this.SendPropertyChanged("categoryID");
					this.OncategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subcategory_Course", Storage="_Courses", ThisKey="subcategoryID", OtherKey="subcategoryID")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Subcategory", Storage="_Category", ThisKey="categoryID", OtherKey="categoryID", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Subcategories.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Subcategories.Add(this);
						this._categoryID = value.categoryID;
					}
					else
					{
						this._categoryID = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Subcategory = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Subcategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserCourseStatistics")]
	public partial class UserCourseStatistic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userCourseStatisticID;
		
		private int _userCourseID;
		
		private System.DateTime _date;
		
		private float _score;
		
		private int _learnedCards;
		
		private int _reviewedCards;
		
		private int _sessionNo;
		
		private int _timeSpent;
		
		private int _reviewCorrectAnswers;
		
		private int _reviewWrongAnswers;
		
		private int _learnedCorrectAnswers;
		
		private int _learnedWrongAnswers;
		
		private EntityRef<UsersCourse> _UsersCourse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserCourseStatisticIDChanging(int value);
    partial void OnuserCourseStatisticIDChanged();
    partial void OnuserCourseIDChanging(int value);
    partial void OnuserCourseIDChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnscoreChanging(float value);
    partial void OnscoreChanged();
    partial void OnlearnedCardsChanging(int value);
    partial void OnlearnedCardsChanged();
    partial void OnreviewedCardsChanging(int value);
    partial void OnreviewedCardsChanged();
    partial void OnsessionNoChanging(int value);
    partial void OnsessionNoChanged();
    partial void OntimeSpentChanging(int value);
    partial void OntimeSpentChanged();
    partial void OnreviewCorrectAnswersChanging(int value);
    partial void OnreviewCorrectAnswersChanged();
    partial void OnreviewWrongAnswersChanging(int value);
    partial void OnreviewWrongAnswersChanged();
    partial void OnlearnedCorrectAnswersChanging(int value);
    partial void OnlearnedCorrectAnswersChanged();
    partial void OnlearnedWrongAnswersChanging(int value);
    partial void OnlearnedWrongAnswersChanged();
    #endregion
		
		public UserCourseStatistic()
		{
			this._UsersCourse = default(EntityRef<UsersCourse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userCourseStatisticID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userCourseStatisticID
		{
			get
			{
				return this._userCourseStatisticID;
			}
			set
			{
				if ((this._userCourseStatisticID != value))
				{
					this.OnuserCourseStatisticIDChanging(value);
					this.SendPropertyChanging();
					this._userCourseStatisticID = value;
					this.SendPropertyChanged("userCourseStatisticID");
					this.OnuserCourseStatisticIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userCourseID", DbType="Int NOT NULL")]
		public int userCourseID
		{
			get
			{
				return this._userCourseID;
			}
			set
			{
				if ((this._userCourseID != value))
				{
					if (this._UsersCourse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserCourseIDChanging(value);
					this.SendPropertyChanging();
					this._userCourseID = value;
					this.SendPropertyChanged("userCourseID");
					this.OnuserCourseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score", DbType="Real NOT NULL")]
		public float score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_learnedCards", DbType="Int NOT NULL")]
		public int learnedCards
		{
			get
			{
				return this._learnedCards;
			}
			set
			{
				if ((this._learnedCards != value))
				{
					this.OnlearnedCardsChanging(value);
					this.SendPropertyChanging();
					this._learnedCards = value;
					this.SendPropertyChanged("learnedCards");
					this.OnlearnedCardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reviewedCards", DbType="Int NOT NULL")]
		public int reviewedCards
		{
			get
			{
				return this._reviewedCards;
			}
			set
			{
				if ((this._reviewedCards != value))
				{
					this.OnreviewedCardsChanging(value);
					this.SendPropertyChanging();
					this._reviewedCards = value;
					this.SendPropertyChanged("reviewedCards");
					this.OnreviewedCardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sessionNo", DbType="Int NOT NULL")]
		public int sessionNo
		{
			get
			{
				return this._sessionNo;
			}
			set
			{
				if ((this._sessionNo != value))
				{
					this.OnsessionNoChanging(value);
					this.SendPropertyChanging();
					this._sessionNo = value;
					this.SendPropertyChanged("sessionNo");
					this.OnsessionNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timeSpent", DbType="Int NOT NULL")]
		public int timeSpent
		{
			get
			{
				return this._timeSpent;
			}
			set
			{
				if ((this._timeSpent != value))
				{
					this.OntimeSpentChanging(value);
					this.SendPropertyChanging();
					this._timeSpent = value;
					this.SendPropertyChanged("timeSpent");
					this.OntimeSpentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reviewCorrectAnswers", DbType="Int NOT NULL")]
		public int reviewCorrectAnswers
		{
			get
			{
				return this._reviewCorrectAnswers;
			}
			set
			{
				if ((this._reviewCorrectAnswers != value))
				{
					this.OnreviewCorrectAnswersChanging(value);
					this.SendPropertyChanging();
					this._reviewCorrectAnswers = value;
					this.SendPropertyChanged("reviewCorrectAnswers");
					this.OnreviewCorrectAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_reviewWrongAnswers", DbType="Int NOT NULL")]
		public int reviewWrongAnswers
		{
			get
			{
				return this._reviewWrongAnswers;
			}
			set
			{
				if ((this._reviewWrongAnswers != value))
				{
					this.OnreviewWrongAnswersChanging(value);
					this.SendPropertyChanging();
					this._reviewWrongAnswers = value;
					this.SendPropertyChanged("reviewWrongAnswers");
					this.OnreviewWrongAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_learnedCorrectAnswers", DbType="Int NOT NULL")]
		public int learnedCorrectAnswers
		{
			get
			{
				return this._learnedCorrectAnswers;
			}
			set
			{
				if ((this._learnedCorrectAnswers != value))
				{
					this.OnlearnedCorrectAnswersChanging(value);
					this.SendPropertyChanging();
					this._learnedCorrectAnswers = value;
					this.SendPropertyChanged("learnedCorrectAnswers");
					this.OnlearnedCorrectAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_learnedWrongAnswers", DbType="Int NOT NULL")]
		public int learnedWrongAnswers
		{
			get
			{
				return this._learnedWrongAnswers;
			}
			set
			{
				if ((this._learnedWrongAnswers != value))
				{
					this.OnlearnedWrongAnswersChanging(value);
					this.SendPropertyChanging();
					this._learnedWrongAnswers = value;
					this.SendPropertyChanged("learnedWrongAnswers");
					this.OnlearnedWrongAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UsersCourse_UserCourseStatistic", Storage="_UsersCourse", ThisKey="userCourseID", OtherKey="usersCoursesID", IsForeignKey=true)]
		public UsersCourse UsersCourse
		{
			get
			{
				return this._UsersCourse.Entity;
			}
			set
			{
				UsersCourse previousValue = this._UsersCourse.Entity;
				if (((previousValue != value) 
							|| (this._UsersCourse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UsersCourse.Entity = null;
						previousValue.UserCourseStatistics.Remove(this);
					}
					this._UsersCourse.Entity = value;
					if ((value != null))
					{
						value.UserCourseStatistics.Add(this);
						this._userCourseID = value.usersCoursesID;
					}
					else
					{
						this._userCourseID = default(int);
					}
					this.SendPropertyChanged("UsersCourse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userID;
		
		private string _name;
		
		private string _surname;
		
		private float _score;
		
		private System.Data.Linq.Binary _avatar;
		
		private System.DateTime _lastLogin;
		
		private System.DateTime _dateRegistered;
		
		private string _username;
		
		private string _password;
		
		private string _email;
		
		private int _totalCardsSeen;
		
		private string _bio;
		
		private int _streak;
		
		private bool _doneToday;
		
		private string _location;
		
		private float _thisWeekScore;
		
		private float _thisMonthScore;
		
		private EntitySet<UsersCourse> _UsersCourses;
		
		private EntitySet<Friendship> _Friendships;
		
		private EntitySet<Friendship> _Friendships1;
		
		private EntitySet<UsersAchievement> _UsersAchievements;
		
		private EntitySet<UsersCard> _UsersCards;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    partial void OnscoreChanging(float value);
    partial void OnscoreChanged();
    partial void OnavatarChanging(System.Data.Linq.Binary value);
    partial void OnavatarChanged();
    partial void OnlastLoginChanging(System.DateTime value);
    partial void OnlastLoginChanged();
    partial void OndateRegisteredChanging(System.DateTime value);
    partial void OndateRegisteredChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OntotalCardsSeenChanging(int value);
    partial void OntotalCardsSeenChanged();
    partial void OnbioChanging(string value);
    partial void OnbioChanged();
    partial void OnstreakChanging(int value);
    partial void OnstreakChanged();
    partial void OndoneTodayChanging(bool value);
    partial void OndoneTodayChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    partial void OnthisWeekScoreChanging(float value);
    partial void OnthisWeekScoreChanged();
    partial void OnthisMonthScoreChanging(float value);
    partial void OnthisMonthScoreChanged();
    #endregion
		
		public User()
		{
			this._UsersCourses = new EntitySet<UsersCourse>(new Action<UsersCourse>(this.attach_UsersCourses), new Action<UsersCourse>(this.detach_UsersCourses));
			this._Friendships = new EntitySet<Friendship>(new Action<Friendship>(this.attach_Friendships), new Action<Friendship>(this.detach_Friendships));
			this._Friendships1 = new EntitySet<Friendship>(new Action<Friendship>(this.attach_Friendships1), new Action<Friendship>(this.detach_Friendships1));
			this._UsersAchievements = new EntitySet<UsersAchievement>(new Action<UsersAchievement>(this.attach_UsersAchievements), new Action<UsersAchievement>(this.detach_UsersAchievements));
			this._UsersCards = new EntitySet<UsersCard>(new Action<UsersCard>(this.attach_UsersCards), new Action<UsersCard>(this.detach_UsersCards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surname", DbType="VarChar(50)")]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score", DbType="Real NOT NULL")]
		public float score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_avatar", DbType="Image", CanBeNull=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary avatar
		{
			get
			{
				return this._avatar;
			}
			set
			{
				if ((this._avatar != value))
				{
					this.OnavatarChanging(value);
					this.SendPropertyChanging();
					this._avatar = value;
					this.SendPropertyChanged("avatar");
					this.OnavatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastLogin", DbType="DateTime NOT NULL")]
		public System.DateTime lastLogin
		{
			get
			{
				return this._lastLogin;
			}
			set
			{
				if ((this._lastLogin != value))
				{
					this.OnlastLoginChanging(value);
					this.SendPropertyChanging();
					this._lastLogin = value;
					this.SendPropertyChanged("lastLogin");
					this.OnlastLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateRegistered", DbType="DateTime NOT NULL")]
		public System.DateTime dateRegistered
		{
			get
			{
				return this._dateRegistered;
			}
			set
			{
				if ((this._dateRegistered != value))
				{
					this.OndateRegisteredChanging(value);
					this.SendPropertyChanging();
					this._dateRegistered = value;
					this.SendPropertyChanged("dateRegistered");
					this.OndateRegisteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalCardsSeen", DbType="Int NOT NULL")]
		public int totalCardsSeen
		{
			get
			{
				return this._totalCardsSeen;
			}
			set
			{
				if ((this._totalCardsSeen != value))
				{
					this.OntotalCardsSeenChanging(value);
					this.SendPropertyChanging();
					this._totalCardsSeen = value;
					this.SendPropertyChanged("totalCardsSeen");
					this.OntotalCardsSeenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bio", DbType="VarChar(400)")]
		public string bio
		{
			get
			{
				return this._bio;
			}
			set
			{
				if ((this._bio != value))
				{
					this.OnbioChanging(value);
					this.SendPropertyChanging();
					this._bio = value;
					this.SendPropertyChanged("bio");
					this.OnbioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_streak", DbType="Int NOT NULL")]
		public int streak
		{
			get
			{
				return this._streak;
			}
			set
			{
				if ((this._streak != value))
				{
					this.OnstreakChanging(value);
					this.SendPropertyChanging();
					this._streak = value;
					this.SendPropertyChanged("streak");
					this.OnstreakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_doneToday", DbType="Bit NOT NULL")]
		public bool doneToday
		{
			get
			{
				return this._doneToday;
			}
			set
			{
				if ((this._doneToday != value))
				{
					this.OndoneTodayChanging(value);
					this.SendPropertyChanging();
					this._doneToday = value;
					this.SendPropertyChanged("doneToday");
					this.OndoneTodayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="VarChar(50)")]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thisWeekScore", DbType="Real NOT NULL")]
		public float thisWeekScore
		{
			get
			{
				return this._thisWeekScore;
			}
			set
			{
				if ((this._thisWeekScore != value))
				{
					this.OnthisWeekScoreChanging(value);
					this.SendPropertyChanging();
					this._thisWeekScore = value;
					this.SendPropertyChanged("thisWeekScore");
					this.OnthisWeekScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_thisMonthScore", DbType="Real NOT NULL")]
		public float thisMonthScore
		{
			get
			{
				return this._thisMonthScore;
			}
			set
			{
				if ((this._thisMonthScore != value))
				{
					this.OnthisMonthScoreChanging(value);
					this.SendPropertyChanging();
					this._thisMonthScore = value;
					this.SendPropertyChanged("thisMonthScore");
					this.OnthisMonthScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersCourse", Storage="_UsersCourses", ThisKey="userID", OtherKey="userID")]
		public EntitySet<UsersCourse> UsersCourses
		{
			get
			{
				return this._UsersCourses;
			}
			set
			{
				this._UsersCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friendship", Storage="_Friendships", ThisKey="userID", OtherKey="user1ID")]
		public EntitySet<Friendship> Friendships
		{
			get
			{
				return this._Friendships;
			}
			set
			{
				this._Friendships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Friendship1", Storage="_Friendships1", ThisKey="userID", OtherKey="user2ID")]
		public EntitySet<Friendship> Friendships1
		{
			get
			{
				return this._Friendships1;
			}
			set
			{
				this._Friendships1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersAchievement", Storage="_UsersAchievements", ThisKey="userID", OtherKey="userID")]
		public EntitySet<UsersAchievement> UsersAchievements
		{
			get
			{
				return this._UsersAchievements;
			}
			set
			{
				this._UsersAchievements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersCard", Storage="_UsersCards", ThisKey="userID", OtherKey="userID")]
		public EntitySet<UsersCard> UsersCards
		{
			get
			{
				return this._UsersCards;
			}
			set
			{
				this._UsersCards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UsersCourses(UsersCourse entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersCourses(UsersCourse entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Friendships(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Friendships(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Friendships1(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User1 = this;
		}
		
		private void detach_Friendships1(Friendship entity)
		{
			this.SendPropertyChanging();
			entity.User1 = null;
		}
		
		private void attach_UsersAchievements(UsersAchievement entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersAchievements(UsersAchievement entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UsersCards(UsersCard entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UsersCards(UsersCard entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersAchievements")]
	public partial class UsersAchievement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userAchievementID;
		
		private int _userID;
		
		private int _achievementID;
		
		private EntityRef<Achievement> _Achievement;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserAchievementIDChanging(int value);
    partial void OnuserAchievementIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OnachievementIDChanging(int value);
    partial void OnachievementIDChanged();
    #endregion
		
		public UsersAchievement()
		{
			this._Achievement = default(EntityRef<Achievement>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userAchievementID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int userAchievementID
		{
			get
			{
				return this._userAchievementID;
			}
			set
			{
				if ((this._userAchievementID != value))
				{
					this.OnuserAchievementIDChanging(value);
					this.SendPropertyChanging();
					this._userAchievementID = value;
					this.SendPropertyChanged("userAchievementID");
					this.OnuserAchievementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_achievementID", DbType="Int NOT NULL")]
		public int achievementID
		{
			get
			{
				return this._achievementID;
			}
			set
			{
				if ((this._achievementID != value))
				{
					if (this._Achievement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnachievementIDChanging(value);
					this.SendPropertyChanging();
					this._achievementID = value;
					this.SendPropertyChanged("achievementID");
					this.OnachievementIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Achievement_UsersAchievement", Storage="_Achievement", ThisKey="achievementID", OtherKey="achievementID", IsForeignKey=true)]
		public Achievement Achievement
		{
			get
			{
				return this._Achievement.Entity;
			}
			set
			{
				Achievement previousValue = this._Achievement.Entity;
				if (((previousValue != value) 
							|| (this._Achievement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Achievement.Entity = null;
						previousValue.UsersAchievements.Remove(this);
					}
					this._Achievement.Entity = value;
					if ((value != null))
					{
						value.UsersAchievements.Add(this);
						this._achievementID = value.achievementID;
					}
					else
					{
						this._achievementID = default(int);
					}
					this.SendPropertyChanged("Achievement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersAchievement", Storage="_User", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersAchievements.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersAchievements.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersCards")]
	public partial class UsersCard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _usersCardID;
		
		private int _userID;
		
		private int _cardID;
		
		private bool _ignore;
		
		private System.DateTime _lastSeen;
		
		private int _cardCombo;
		
		private System.DateTime _nextSee;
		
		private int _correctAnswers;
		
		private int _wrongAnswers;
		
		private double _goodness;
		
		private EntityRef<Card> _Card;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusersCardIDChanging(int value);
    partial void OnusersCardIDChanged();
    partial void OnuserIDChanging(int value);
    partial void OnuserIDChanged();
    partial void OncardIDChanging(int value);
    partial void OncardIDChanged();
    partial void OnignoreChanging(bool value);
    partial void OnignoreChanged();
    partial void OnlastSeenChanging(System.DateTime value);
    partial void OnlastSeenChanged();
    partial void OncardComboChanging(int value);
    partial void OncardComboChanged();
    partial void OnnextSeeChanging(System.DateTime value);
    partial void OnnextSeeChanged();
    partial void OncorrectAnswersChanging(int value);
    partial void OncorrectAnswersChanged();
    partial void OnwrongAnswersChanging(int value);
    partial void OnwrongAnswersChanged();
    partial void OngoodnessChanging(double value);
    partial void OngoodnessChanged();
    #endregion
		
		public UsersCard()
		{
			this._Card = default(EntityRef<Card>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usersCardID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int usersCardID
		{
			get
			{
				return this._usersCardID;
			}
			set
			{
				if ((this._usersCardID != value))
				{
					this.OnusersCardIDChanging(value);
					this.SendPropertyChanging();
					this._usersCardID = value;
					this.SendPropertyChanged("usersCardID");
					this.OnusersCardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userID", DbType="Int NOT NULL")]
		public int userID
		{
			get
			{
				return this._userID;
			}
			set
			{
				if ((this._userID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIDChanging(value);
					this.SendPropertyChanging();
					this._userID = value;
					this.SendPropertyChanged("userID");
					this.OnuserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardID", DbType="Int NOT NULL")]
		public int cardID
		{
			get
			{
				return this._cardID;
			}
			set
			{
				if ((this._cardID != value))
				{
					if (this._Card.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncardIDChanging(value);
					this.SendPropertyChanging();
					this._cardID = value;
					this.SendPropertyChanged("cardID");
					this.OncardIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ignore", DbType="Bit NOT NULL")]
		public bool ignore
		{
			get
			{
				return this._ignore;
			}
			set
			{
				if ((this._ignore != value))
				{
					this.OnignoreChanging(value);
					this.SendPropertyChanging();
					this._ignore = value;
					this.SendPropertyChanged("ignore");
					this.OnignoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastSeen", DbType="DateTime NOT NULL")]
		public System.DateTime lastSeen
		{
			get
			{
				return this._lastSeen;
			}
			set
			{
				if ((this._lastSeen != value))
				{
					this.OnlastSeenChanging(value);
					this.SendPropertyChanging();
					this._lastSeen = value;
					this.SendPropertyChanged("lastSeen");
					this.OnlastSeenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cardCombo", DbType="Int NOT NULL")]
		public int cardCombo
		{
			get
			{
				return this._cardCombo;
			}
			set
			{
				if ((this._cardCombo != value))
				{
					this.OncardComboChanging(value);
					this.SendPropertyChanging();
					this._cardCombo = value;
					this.SendPropertyChanged("cardCombo");
					this.OncardComboChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nextSee", DbType="DateTime NOT NULL")]
		public System.DateTime nextSee
		{
			get
			{
				return this._nextSee;
			}
			set
			{
				if ((this._nextSee != value))
				{
					this.OnnextSeeChanging(value);
					this.SendPropertyChanging();
					this._nextSee = value;
					this.SendPropertyChanged("nextSee");
					this.OnnextSeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_correctAnswers", DbType="Int NOT NULL")]
		public int correctAnswers
		{
			get
			{
				return this._correctAnswers;
			}
			set
			{
				if ((this._correctAnswers != value))
				{
					this.OncorrectAnswersChanging(value);
					this.SendPropertyChanging();
					this._correctAnswers = value;
					this.SendPropertyChanged("correctAnswers");
					this.OncorrectAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_wrongAnswers", DbType="Int NOT NULL")]
		public int wrongAnswers
		{
			get
			{
				return this._wrongAnswers;
			}
			set
			{
				if ((this._wrongAnswers != value))
				{
					this.OnwrongAnswersChanging(value);
					this.SendPropertyChanging();
					this._wrongAnswers = value;
					this.SendPropertyChanged("wrongAnswers");
					this.OnwrongAnswersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_goodness", DbType="Float NOT NULL")]
		public double goodness
		{
			get
			{
				return this._goodness;
			}
			set
			{
				if ((this._goodness != value))
				{
					this.OngoodnessChanging(value);
					this.SendPropertyChanging();
					this._goodness = value;
					this.SendPropertyChanged("goodness");
					this.OngoodnessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Card_UsersCard", Storage="_Card", ThisKey="cardID", OtherKey="cardID", IsForeignKey=true)]
		public Card Card
		{
			get
			{
				return this._Card.Entity;
			}
			set
			{
				Card previousValue = this._Card.Entity;
				if (((previousValue != value) 
							|| (this._Card.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Card.Entity = null;
						previousValue.UsersCards.Remove(this);
					}
					this._Card.Entity = value;
					if ((value != null))
					{
						value.UsersCards.Add(this);
						this._cardID = value.cardID;
					}
					else
					{
						this._cardID = default(int);
					}
					this.SendPropertyChanged("Card");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UsersCard", Storage="_User", ThisKey="userID", OtherKey="userID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UsersCards.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UsersCards.Add(this);
						this._userID = value.userID;
					}
					else
					{
						this._userID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
