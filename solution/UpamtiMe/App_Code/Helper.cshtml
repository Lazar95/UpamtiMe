@using Data
@using System.Web.Mvc

@helper Image(byte[] image, string m_type, string m_name)
{
if (image != null)
{
    var base64 = Convert.ToBase64String(image.ToArray());
    var imgSrc = String.Format("data:image/gif;base64,{0}", base64);
        <div @m_type="@m_name" style="background-image: url(@imgSrc)"></div>
}
else
{
        <div @m_type="@m_name"></div>
}
}

@helper Button(string type, string id, string icon, string text, string link = "", bool dropdown = false, Data.DTOs.Options option = null, List<string> links = null, bool enabled = true)
{

    <div class="@("button-" + type)" id=@id>
        <a href="@link" class="button-link" style="pointer-events: @(enabled ? "auto" : "none")">
            <div class="button-icon @("fa fa-"+icon)"></div>
            <div class="button-text">@text</div>
        </a>
        @if(dropdown && option != null &&  option.List.Count > 0)
        {
            <div class="count">@option.List.ClosestTo(option.Default)</div>
            <ul class="dropdown">
                @for (int i = 0; i < option.List.Count; i++)
                {
                    <li><a class="button-link" href="@links[i]">@option.List[i]</a></li>
                }
            </ul>
         }
</div>
}

@helper SessionButtonLearn(UpamtiMe.Models.CourseProfileModel model, int index, UrlHelper url)
{
if (index != -1)
{
    // za pojedinacan nivo
    List<string> LearnList = new List<string>();
    foreach (int option in model.Levels[index].LearnOptions.List)
    {
        LearnList.Add(url.Action("Learn", new { courseID = model.CourseID, levelID = @model.Levels[index].LevelID, numberOfCards = option }));
    }
    @Helper.Button("rect button-level-learn", "", "graduation-cap", "Uči", url.Action("Learn", new { courseID = model.CourseID, levelID = @model.Levels[index].LevelID, numberOfCards = model.Levels[index].LearnOptions.List.ClosestTo(model.Levels[index].LearnOptions.Default) }), true, @model.Levels[index].LearnOptions, LearnList)
}
else
{
    // za ceo kurs
    List<string> LearnList = new List<string>();
    foreach (int option in model.LearnOptions.List)
    {
        LearnList.Add(url.Action("Learn", new { courseID = model.CourseID, numberOfCards = option }));
    }
    @Helper.Button("rect button-level-learn", "", "graduation-cap", "Uči", url.Action("Learn", new { courseID = model.CourseID, numberOfCards = model.LearnOptions.List.ClosestTo(model.LearnOptions.Default) }), true, @model.LearnOptions, LearnList)
}
}

@helper SessionButtonReview(UpamtiMe.Models.CourseProfileModel model, int index, UrlHelper url)
{
if (index != -1)
{
    // za pojedinacan nivo
    List<string> ReviewList = new List<string>();
    foreach (int option in model.Levels[index].ReviewOptions.List)
    {
        ReviewList.Add(url.Action("Review", new { courseID = model.CourseID, levelID = @model.Levels[index].LevelID, numberOfCards = option }));
    }
    @Helper.Button("rect button-level-review", "", "bell", "Obnovi", url.Action("Review", new { courseID = model.CourseID, levelID = @model.Levels[index].LevelID, numberOfCards = model.Levels[index].ReviewOptions.List.ClosestTo(model.Levels[index].ReviewOptions.Default) }), true, @model.Levels[index].ReviewOptions, ReviewList)
}
else
{
    // za ceo kurs
    List<string> ReviewList = new List<string>();
    foreach (int option in model.ReviewOptions.List)
    {
        ReviewList.Add(url.Action("Review", new { courseID = model.CourseID, numberOfCards = option }));
    }
    @Helper.Button("rect button-level-review", "", "bell", "Obnovi", url.Action("Review", new { courseID = model.CourseID, numberOfCards = model.ReviewOptions.List.ClosestTo(model.ReviewOptions.Default) }), true, @model.ReviewOptions, ReviewList)
}
}

@helper SessionButtonLinky(UpamtiMe.Models.CourseProfileModel model, int index, UrlHelper url)
{
if (index == -1)
{
    @Helper.Button("rect button-level-linky", "", "chain", "Spajalica", url.Action("Linky", new { courseID = model.CourseID }))
}
else
{
    @Helper.Button("rect button-level-linky", "", "chain", "Spajalica", url.Action("Linky", new { courseID = model.CourseID, levelID = @model.Levels[index].LevelID }))
}
}

@helper SessionButtonList(UpamtiMe.Models.CourseProfileModel model, int index, UrlHelper url)
{
    @Helper.Button("rect button-level-list", "", "list", "Spisak", "#!")
}

@helper LeaderboardEntry(int order, string username, double score, int userID, bool isHighlighted, UrlHelper url)
{
    <li class="@(isHighlighted ? " highlight" : "")" data-user-id="@userID">
        <div class="order">@order</div>
        <div class="avatar">
            <i class="fa fa-refresh"></i>
        </div>
        <div class="username"><a href="@url.Action("Profile", "Users", new {id = userID})">@username</a></div>
        <div class="score">@score</div>
    </li>
}

@helper LeaderboardEntryGeneral(int redniBr, Data.DTOs.LeaderboardEntryDTO lde, int? myUserID, string type, UrlHelper url)
{
    switch (type)
    {
        case "all-time-score": case "all-time-score-full": @Helper.LeaderboardEntry(redniBr++, lde.Username, lde.AllTimeScore, lde.UserID, myUserID != null && lde.UserID == myUserID, url); break;
        case "week-score": case "week-score-full": @Helper.LeaderboardEntry(redniBr++, lde.Username, lde.WeekScore, lde.UserID, myUserID != null && lde.UserID == myUserID, url); break;
        case "month-score": case "month-score-full": @Helper.LeaderboardEntry(redniBr++, lde.Username, lde.MonthScore, lde.UserID, myUserID != null && lde.UserID == myUserID, url); break;
    }
}

@helper Leaderboard(string type, List<Data.DTOs.LeaderboardEntryDTO> list, int? userID, int? limit, UrlHelper url, bool current = true)
{
    <ul id=@("leaderboard-" + type) class="@(current ? "current" : "")">
        @{
            if (limit == null)
            {
                limit = list.Count;
            }

            int redniBr = 1;

            int usersIndex = -1;
            if (userID != null)
            {
                usersIndex = list.FindIndex(a => a.UserID == userID);
            }

            if (usersIndex == -1 || usersIndex < limit)
            {
                foreach (Data.DTOs.LeaderboardEntryDTO lde in list.Take(limit.Value))
                {
                    @Helper.LeaderboardEntryGeneral(redniBr++, lde, userID, type, url)
                }
            }
            else
            {
                foreach (Data.DTOs.LeaderboardEntryDTO lde in list.Take(limit.Value - 1))
                {
                    @Helper.LeaderboardEntryGeneral(redniBr++, lde, userID, type, url)
                }
                @Helper.LeaderboardEntryGeneral(usersIndex, list[usersIndex], userID, type, url)
            }
        }
    </ul>
}

@helper LeaderboardTabs()
{
    <ul id="leaderboard-tabs">
        <li id="leaderboard-tabs-week" class="active">Nedelja</li>
        <li id="leaderboard-tabs-month">Mesec</li>
        <li id="leaderboard-tabs-all">Ukupno</li>
    </ul>
}

@helper SearchResult(UrlHelper url, int id, string name, int cat, string catName, int? subcat, string subcatName, string desc, int partCount, int noOfCards, int? rating, int creatorID, string creatorUsername, byte[] image, bool enrolled)
{
    <li class="result" data-rating="@rating" data-course-id="@id">

        <div class="avatar-wrapper">
            <a href="@url.Action("Profile", "Courses", new { id = id })">
                @Helper.Image(image, "class", "avatar")
            </a>
            <div class="creator-username">by <a href="#!">@@@creatorUsername</a></div>
        </div>
        <div class="course-info">
            <div class="course-info-visible">
                <div class="course-info-init">
                    <div class="show-more"><i class="fa fa-ellipsis-v"></i></div>
                    <div class="name"><a href="@url.Action("Profile", "Courses", new { id = id })">@name</a></div>
                    <div class="cat-subcat">
                        <div class="cat" data-cat-id="@cat">
                            <a href="@url.Action("Index", "Courses", new { categoryID = cat })">@catName</a>
                        </div>
                        <i class="fa fa-caret-right"></i>
                        <div class="subcat" data-subcat-id="@subcat">
                            <a href="@url.Action("Index", "Courses", new { subcategoryID = subcat })">@subcatName</a>
                        </div>
                    </div>
                    <div class="stats">
                        <dl class="tooltippable" data-tooltip-text="Broj učesnika" data-tooltip-direction="bottom">
                            <dt><i class="fa fa-users"></i></dt> @* Participant count *@
                            <dd>@partCount</dd>
                        </dl>
                        <dl class="tooltippable" data-tooltip-text="Broj kartica" data-tooltip-direction="bottom">
                            <dt><i class="fa fa-file"></i></dt> @* Number of cards *@
                            <dd>@noOfCards</dd>
                        </dl>
                    </div>
                    <div class="description-snippet-placeholder"></div>
                </div>
                <div class="description-full">@desc</div>
                @if (!enrolled)
                {
                    @Helper.Button("rect button-enroll", "", "unlock", "Učlani se", url.Action("Enroll", "Course", new { id = id }))
                }
                else
                {
                    @Helper.Button("rect button-goto", "", "caret-right", "Idi na stranicu kursa", url.Action("Course", new { id = id }))
                }
            </div>
        </div>
    </li>
}

@helper CourseCard(UrlHelper url, int id, string name, int cat, string catName, int? subcat, string subcatName, string desc, int partCount, int noOfCards, int? rating, int creatorID, string creatorUsername, byte[] image, int learned, int review, int unseen, int total, string dates, string points)
{
    <li class="course-card" data-rating="@rating" data-course-id="@id">

        <div class="avatar-wrapper">
            <a href="@url.Action("Profile", "Courses", new { id = id })">
                @Helper.Image(image, "class", "avatar")
            </a>
            <div class="creator-username">by <a href="#!">@@@creatorUsername</a></div>
        </div>
        <div class="course-info">
            <div class="course-info-visible">
                <div class="course-info-init">
                    <div class="show-more"><i class="fa fa-ellipsis-v"></i></div>
                    <div class="name"><a href="@url.Action("Profile", "Courses", new { id = id })">@name</a></div>
                    <div class="cat-subcat">
                        <div class="cat" data-cat-id="@cat">
                            <a href="@url.Action("Index", "Courses", new { categoryID = cat })">@catName</a>
                        </div>
                        <i class="fa fa-caret-right"></i>
                        <div class="subcat" data-subcat-id="@subcat">
                            <a href="@url.Action("Index", "Courses", new { subcategoryID = subcat })">@subcatName</a>
                        </div>
                    </div>
                    <div class="stats">
                        <dl class="tooltippable" data-tooltip-text="Neviđene" data-tooltip-direction="top">
                            <dt>Neviđene</dt>
                            <dd>@unseen</dd>
                        </dl>
                        <dl class="tooltippable" data-tooltip-text="Za obnavljanje" data-tooltip-direction="top">
                            <dt>Za obnavljanje</dt>
                            <dd>@review</dd>
                        </dl>
                        <dl class="tooltippable" data-tooltip-text="Naučene" data-tooltip-direction="top">
                            <dt>Naučene</dt>
                            <dd>@learned</dd>
                        </dl>
                        <dl class="tooltippable" data-tooltip-text="Ukupno" data-tooltip-direction="top">
                            <dt>Za obnavljanje</dt>
                            <dd>@total</dd>
                        </dl>
                    </div>
                    <div class="session-buttons">
                        @Helper.Button("rect", "", "graduation-cap", "Uči", @url.Action("Learn", "Courses", new { courseID = @id }))
                        @Helper.Button("rect", "", "bell", "Obnovi", @url.Action("Review", "Courses", new { courseID = @id }))
                    </div>
                </div>
                <div class="stats-points-per-course-wrapper">
                    <canvas class="stats-points-per-course" width="264" height="120" data-dates="@dates" data-points="@points"></canvas>
                </div>
                @Helper.Button("rect button-goto", "", "caret-right", "Idi na stranicu kursa", url.Action("Profile", "Courses", new { id = id }))
            </div>
        </div>
    </li>
}

@* 0 -> ucenje, 1 -> obnavljanje, 2 -> spajalica *@
@helper SessionCover(int courseID, UrlHelper url, int type = 0)
{
    <div id="cover">
        <aside>
            <div class="message">
                <div class="subtitle"></div>
                <div class="title"></div>
            </div>
            <div class="info">
                <div class="total-score"><span>474</span></div>
                @if (type == 2)
                {
                    <div class="additional">
                        <ul>
                            <li id="cover-remaining-lives">Preostali životi: <span>+300</span></li>
                            <li id="cover-correctness">Tačnost: <span>+100</span></li>
                            <li id="cover-max-combo">Najveći kombo: <span></span></li>
                        </ul>
                    </div>
                }
            </div>
            <div class="actions">
                @if (type == 0) 
                {
                    @Helper.Button("rect", "btn-play-again", "angle-double-right", "Nastavi", @url.Action("Learn", "Courses", new { courseID = courseID }))
                }
                else if (type == 1)
                {
                    @Helper.Button("rect", "btn-play-again", "angle-double-right", "Nastavi", @url.Action("Review", "Courses", new { courseID = courseID }))
                }
                else
                {
                    @Helper.Button("rect", "btn-play-again", "undo", "Igraj opet", @Request.RawUrl)
                }
                @Helper.Button("rect", "btn-to-course", "clone", "Na kurs", @url.Action("Profile", "Courses", new { id = courseID }))
            </div>
        </aside>
    </div>
}