@using Data
@using Data.DTOs
@model UpamtiMe.Models.CourseProfileModel

@{
    ViewBag.Title = "Index";
}
@{ LoginDTO user = UserSession.GetUser();}

<main id="course-profile">

    <div class="course-banner">
        @Helper.Image(Model.Image, "class", "avatar")

        <div class="basic-info">
            <h1 id="course-name"><span>@Model.Name</span></h1>
            <div class="cat-subcat">
                <span data-cat-id=@Model.CategoryID class="cat tooltippable" data-tooltip-text="Pretraži kategoriju" data-tooltip-direction="bottom">
                    <a href="@Url.Action("Index", "Courses", new { categoryID = Model.CategoryID })">@Model.CategoryName</a>
                </span>
                <i class="fa fa-caret-right"></i>
                <span data-subcat-id=@Model.SubcategoryID  class="subcat tooltippable" data-tooltip-text="Pretraži podkategoriju" data-tooltip-direction="bottom">
                    <a href="@Url.Action("Index", "Courses", new { subcategoryID = Model.SubcategoryID })">@Model.SubcategoryName</a>
                </span>
            </div>

            <div id="course-description">
                <span>@Model.Description</span>
            </div>

            @if (user != null)
            {
                <div id="course-actions">
                    @if (user.UserID == Model.CreatorID)
                    {
                        <a id="button-edit-course" class="button-link" href="@Url.Action("Edit", "Courses", new { id = @Model.CourseID })">
                            <div class="button tooltippable" data-tooltip-text="Izmeni kurs" data-tooltip-direction="left">
                                <i class="fa fa-pencil"></i>
                            </div>
                        </a>
                    }

                    @if (Model.Favorite == null)
                    {
                        <a id="button-favorite" class="button-link" href="@Url.Action("Favorite", new { courseID = @Model.CourseID })">
                            <div class="button tooltippable" data-tooltip-text="Dodaj u omiljene" data-tooltip-direction="left">
                                <i class="fa fa-heart-o"></i>
                            </div>
                        </a>
                    }
                    else
                    {
                        <a id="button-unfavorite" class="button-link" href="@Url.Action("UnFavorite", new { courseID = @Model.CourseID })">
                            <div class="button tooltippable" data-tooltip-text="Ukloni iz omiljenih" data-tooltip-direction="left">
                                <i class="fa fa-heart"></i>
                            </div>
                        </a>
                    }
                </div>
            }
        </div>
    </div>

    <div class="main-content" data-enrolled="@(user != null && Model.Statistics != null)">

        <div id="list-of-cards">
            <div class="less"><i class="fa fa-times"></i></div>
            <div id="list-of-cards-inner">

            </div>
        </div>

        <div class="buttons">
            @if (user != null)
            {
                if (Model.Statistics == null)
                {
                    <a id="button-enroll" class="button-link" href=@Url.Action("Enroll", new { id = Model.CourseID })>@Helper.Button("rect", "", "unlock", "Prijavi se na kurs")</a>
                }
                else
                {
                    var learnLevelQuery = (from a in @Model.Levels where a.LearningStatistics.Unseen > 0 select new { id = a.LevelID, no = a.Number });
                    int learnLevel = learnLevelQuery.Any() ? learnLevelQuery.OrderBy(a => a.no).First().id : 0;
                    var reviewLevelQuery = (from a in @Model.Levels where a.LearningStatistics.Review > 0 select new { id = a.LevelID, no = a.Number });
                    int reviewLevel = reviewLevelQuery.Any() ? reviewLevelQuery.OrderBy(a => a.no).First().id : 0;

                    @Helper.SessionButtonLearn(Model, -1, Url)
                    @Helper.SessionButtonReview(Model, -1, Url)
                    @Helper.SessionButtonLinky(Model, -1, Url)
                }
            }
        </div>

        @{
            int index = -1;
            int lgCount = 0;
            bool lgFlag = true;
            int mdCount = 0;
            bool mdFlag = true;
            int smCount = 0;
            bool smFlag = true;
            int xsCount = 0;
            bool xsFlag = true;

            <ul class="levels big-container">
                <li class="clearfix clearfix-lg" style="width:100%;"></li>
                <li class="clearfix clearfix-md" style="width:100%;"></li>
                <li class="clearfix clearfix-sm" style="width:100%;"></li>
                <li class="clearfix clearfix-xs" style="width:100%;"></li>
                @for (int i = 0; i < Model.Levels.Count; i++)
                {
                    index++;
                    lgCount++;
                    mdCount++;
                    smCount++;
                    xsCount++;
                    <li class="level level-color-id-@(Model.Levels[index].Color == 0 ? 1 : Model.Levels[index].Color)" data-level-id ="@Model.Levels[index].LevelID">
                        <div class="circle-display">
                            <div class="icon icon-id-@(Model.Levels[index].Icon == 0 ? 1 : Model.Levels[index].Icon)">@*level.icon; level.color*@</div>
                            <div class="name"><span>@Model.Levels[index].Number</span>@Model.Levels[index].Name</div>
                            <div class="pie-ring-outer">
                                <div class="pie-ring-inner">
                                    @if (Model.Levels[index].LearningStatistics != null)
                                    {
                                        int t = Model.Levels[index].LearningStatistics.Total;
                                        t = t == 0 ? 1 : t;
                                        double tdeg = 360.0 / t;
                                        double ldeg = Model.Levels[index].LearningStatistics.Learned * tdeg;
                                        double rdeg = Model.Levels[index].LearningStatistics.Review * tdeg;
                                        double udeg = Model.Levels[index].LearningStatistics.Unseen * tdeg;
                                        int l = (int)Math.Ceiling(ldeg) == 360 ? 361 : (int)Math.Ceiling(ldeg);
                                        int r = (int)Math.Ceiling(rdeg) == 360 ? 361 : (int)Math.Ceiling(rdeg);
                                        int u = (int)Math.Ceiling(udeg) == 360 ? 361 : (int)Math.Ceiling(udeg);
                                        <div class="pie pie-learned @(l > 180 ? "big" : "")" data-start="0" data-value="@l"></div>
                                        <div class="pie pie-forgotten @(r > 180 ? "big" : "")" data-start="@l" data-value="@r"></div>
                                        <div class="pie pie-unseen @(u > 180 ? "big" : "")" data-start="@(l + r)" data-value="@u"></div>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="more-info-outer">
                            <div class="more-info-inner">

                                @if (user != null && Model.Statistics != null)
                                {
                                    <div class="session-buttons">
                                        @Helper.SessionButtonLearn(Model, index, Url)
                                        @Helper.SessionButtonReview(Model, index, Url)
                                        @Helper.SessionButtonLinky(Model, index, Url)
                                        @Helper.SessionButtonList(Model, index, Url)
                                    </div>
                                }

                                <div class="level-info">

                                    @if (Model.Levels[index].LearningStatistics != null)
                                    {
                                        <div class="statistics">
                                            <dl class="stats stats-vertical level-total-card">
                                                <dt>Ukupno</dt>
                                                <dd>@Model.Levels[index].CardNumber</dd>
                                            </dl>
                                            <dl class="stats stats-vertical  level-learned-cards">
                                                <dt>Nauceno</dt>
                                                <dd>@Model.Levels[index].LearningStatistics.Learned</dd>
                                            </dl>
                                            <dl class="stats stats-vertical  level-review-cards">
                                                <dt>Za obnavljanje</dt>
                                                <dd>@Model.Levels[index].LearningStatistics.Review</dd>
                                            </dl>
                                            <dl class="stats stats-vertical  level-unseen-cards">
                                                <dt>Neotvorenih</dt>
                                                <dd>@Model.Levels[index].LearningStatistics.Unseen</dd>
                                            </dl>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </li>

                    if (lgCount == (lgFlag ? 5 : 4))
                    {
                        lgFlag = !lgFlag;
                        lgCount = 0;
                        <li class="clearfix clearfix-lg" style="width:100%;"></li>
                    }
                    if (mdCount == (mdFlag ? 4 : 3))
                    {
                        mdFlag = !mdFlag;
                        mdCount = 0;
                        <li class="clearfix clearfix-md" style="width:100%;"></li>
                    }
                    if (smCount == (smFlag ? 4 : 3))
                    {
                        smFlag = !smFlag;
                        smCount = 0;
                        <li class="clearfix clearfix-sm" style="width:100%;"></li>
                    }
                    if (xsCount == (xsFlag ? 3 : 2))
                    {
                        xsFlag = !xsFlag;
                        xsCount = 0;
                        <li class="clearfix clearfix-xs" style="width:100%;"></li>
                    }

                }
                <li class="clearfix clearfix-lg" style="width:100%;"></li>
                <li class="clearfix clearfix-md" style="width:100%;"></li>
                <li class="clearfix clearfix-sm" style="width:100%;"></li>
                <li class="clearfix clearfix-xs" style="width:100%;"></li>
            </ul>
        }
    </div>

    <aside>
        @if (Model.Statistics != null)
        {
            <div class="personal-stats">
                <dl class="stats stats-horizontal"><dt>Neotvorenih</dt><dd>@Model.Statistics.LearningStatistics.Unseen</dd></dl>
                <dl class="stats stats-horizontal"><dt>Za obnavljanje</dt><dd>@Model.Statistics.LearningStatistics.Review</dd></dl>
                <dl class="stats stats-horizontal"><dt>Naučeno</dt><dd>@Model.Statistics.LearningStatistics.Learned</dd></dl>
            </div>
        }

        <div class="course-stats">
            <dl class="stats stats-horizontal"><dt>Broj kartica</dt><dd>@Model.NumberOfCards</dd></dl>
            <dl class="stats stats-horizontal"><dt>Broj učesnika</dt><dd>@Model.ParticipantCount</dd></dl>
            <dl class="stats stats-horizontal"><dt>Kreator</dt><dd><a href="@Url.Action(@Model.CreatorUsername, "Profile", new { id = @Model.CreatorID })">@Model.CreatorUsername</a></dd></dl>
        </div>

        <div id="leaderboard" class="leaderboard-emphasized-top">
            @Helper.LeaderboardTabs()
            @Helper.Leaderboard("week-score", Model.Leaderboard.OrderByDescending(a => a.WeekScore).ToList(), user?.UserID, 20, Url, true)
            @Helper.Leaderboard("month-score", Model.Leaderboard.OrderByDescending(a => a.MonthScore).ToList(), user?.UserID, 20, Url, false)
            @Helper.Leaderboard("all-time-score", Model.Leaderboard.OrderByDescending(a => a.AllTimeScore).ToList(), user?.UserID, 20, Url, false)
        </div>
    </aside>

</main>

<script src="~/Scripts/course-profile.js"></script>

<script type="text/javascript">

    // Po ucitavanju dokumenta
    $(window).bind('load', function () {
        $('#leaderboard > ul:not(#leaderboard-tabs) > li:nth-child(-n+3)').each(function () {
            var $that = $(this);
            var id = $(this).attr('data-user-id');
            $.post("@Url.Action("getavatar", "users")", { "id": id }, function (data) {
                $that.children('.avatar').html('');
                $that.children('.avatar').attr('style', 'background-image: url(' + data + ')');
            });
        })
    });

    var loadListOfCards = function (levelID) {
        $('#list-of-cards').addClass('visible');

        //ajax
        $.post("@Url.Action("GetCardsOfLevel", "Courses")", { "levelID": levelID }, function (data) {
            $('#list-of-cards-inner').html(data.HTMLString);
        });
    }

    // Spsiak
    $('.levels').on('click', '.button-level-list', function () {
        loadListOfCards($(this).closest('.level').attr('data-level-id'));
    });

    $('.less').click(function () {
        $(this).parent().removeClass('visible');
        //TODO obrisi sve unutra po zatvaranju
    });

    $('.levels').on('click', '.circle-display', function () {
        var $level = $(this).parent();
        var index = $level.index() + 1;
        if ($('main .main-content').attr('data-enrolled') == "True") {
            if ($level.hasClass('active')) {
                $($level.removeClass('active'));
            } else {
                var size = $('main').attr('data-size');
                var $okolni = $level.nextUntil('.clearfix-' + size);
                var $okolni = $okolni.add($level.prevUntil('.clearfix-' + size));
                var $okolni = $okolni.not('.clearfix');
                if ($okolni.hasClass('active')) {
                    // Menja se kroz istu grupu
                    $okolni.find('.more-info-outer').css('height', '240px').css('max-height', '240px').css('min-height', '240px');
                    $okolni.removeClass('active');
                    $level.addClass('active');
                    setTimeout(function () { $level.parent().find('.more-info-outer').removeAttr('style') }, 500);
                } else {
                    // Manje se medju grupama
                    $('.level').removeClass('active');
                    $level.addClass('active');
                }
            }
        } else {
            loadListOfCards($level.attr('data-level-id'));
        }
    });
</script>