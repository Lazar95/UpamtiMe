@model UpamtiMe.Models.UserIndexModel
@using Data
@using Data.DTOs
@{
    ViewBag.Title = "Index";
}
@{ LoginDTO user = UserSession.GetUser();}

<main id="users-index">

    <div id="user-stats" class="big-container">
        <div id="stats-learning-history-month-wrapper">
            <canvas id="stats-learning-history-month" width="890" height="190"
                data-learned= "@Model.Statistics.Learned"
                data-reviewed="@Model.Statistics.Reviewed"
                data-dates="@Model.Statistics.Dates"
            ></canvas>
        </div>
        <div id="stats-cards-breakdown-wrapper">
            <canvas id="stats-cards-breakdown" width="140" height="140" data-learned="@Model.LearningStatistics.Learned" data-review="@Model.LearningStatistics.Review" data-unseen="@Model.LearningStatistics.Unseen"></canvas>
        </div>
        <div id="stats-points-week-wrapper">
            <canvas id="stats-points-week" width="340" height="140" data-points= "@Model.Statistics.Scores" data-dates="@Model.Statistics.Dates"></canvas>
        </div>
        <div id="stats-time-week-wrapper">
            <canvas id="stats-time-week" width="340" height="140" data-time="@Model.Statistics.Times" data-dates="@Model.Statistics.Dates"></canvas>
        </div>
        <div class="more"><i class="fa fa-arrows-alt"></i></div>
        <div class="full-screen">
            <div class="less"><i class="fa fa-times"></i></div>
            user-stas
        </div>
    </div>

    <div id="leaderboard" class="big-container">
        @Helper.LeaderboardTabs()
        @Helper.Leaderboard("week-score", Model.Leaderboard.OrderByDescending(a => a.WeekScore).ToList(), user?.UserID, 11, Url, true)
        @Helper.Leaderboard("month-score", Model.Leaderboard.OrderByDescending(a => a.MonthScore).ToList(), user?.UserID, 11, Url, false)
        @Helper.Leaderboard("all-time-score", Model.Leaderboard.OrderByDescending(a => a.AllTimeScore).ToList(), user?.UserID, 11, Url, false)
        <div class="more"><i class="fa fa-arrows-alt"></i></div>
        <div class="full-screen">
            <div class="full-screen-inner">
                <div class="less"><i class="fa fa-times"></i></div>
                <div class="week-container">
                    <div class="full-leaderboard-headings">
                        <h3>Nedelja</h3>
                    </div>
                    @Helper.Leaderboard("week-score", Model.Leaderboard.OrderByDescending(a => a.WeekScore).ToList(), user?.UserID, null, Url, true)
                </div>
                <div class="month-container">
                    <div class="full-leaderboard-headings">
                        <h3>Mesec</h3>
                    </div>
                    @Helper.Leaderboard("month-score", Model.Leaderboard.OrderByDescending(a => a.MonthScore).ToList(), user?.UserID, null, Url, true)
                </div>
                <div class="total-container">
                    <div class="full-leaderboard-headings">
                        <h3>Ukupno</h3>
                    </div>
                    @Helper.Leaderboard("all-time-score", Model.Leaderboard.OrderByDescending(a => a.AllTimeScore).ToList(), user?.UserID, null, Url, true)
                </div>                
            </div>
        </div>
    </div>

    <div id="user-courses">
        <ul>
            @foreach (Data.DTOs.UserCourseDTO course in @Model.Courses)
            {
                @Helper.CourseCard(
                    Url, course.CourseID, course.Name, course.CategoryID, course.CategoryName, course.SubcategoryID, course.SubcategoryName,
                    course.Description, course.ParticipantCount, course.NumberOfCards, course.Rating, course.CreatorID, course.CreatorUsername, course.Image,
                    course.LearningStatistics.LearningStatistics.Learned, course.LearningStatistics.LearningStatistics.Review,
                    course.LearningStatistics.LearningStatistics.Unseen, course.LearningStatistics.LearningStatistics.Total,
                    course.StatisctisByDays.Dates, course.StatisctisByDays.Scores
                )
            }
        </ul>
    </div>

    @if (Model.More)
    {
        <div id="load-more"><button><i class="fa fa-circle-o-notch fa-spin"></i></button></div>
    }


</main>


<script type="text/javascript">
    var BlockNumber = 0; //ne => //Infinate Scroll starts from second block
    var NoMoreData = false;
    var inProgress = false;

    var loadMore = function () {
        if (!inProgress) {

            inProgress = true;

            $.post("@Url.Action("InfinateScroll", "Users")",
                { "BlockNumber": BlockNumber },
                    function (data) {
                        BlockNumber = BlockNumber + 1;
                        NoMoreData = data.NoMoreData;
                        $('#user-courses > ul').append(data.HTMLString);
                        if (data.NoMoreData) {
                            $('#load-more').remove();
                        }

                        // za svaki  kurs
                        var temp = [
                          { dataName: 'data-dates', color: "", label: "", },
                          { dataName: 'data-points', color: colorBlueGrey700, label: 'Poeni', }
                        ];

                        // lol
                        var min = data.min - 2;
                        var max = data.max + 1;

                        var elements = $('.stats-points-per-course:gt(' + min + '):lt(' + max + ')');
                        elements.each(function () {
                            loadGraphLine($(this), temp, 7);
                        });

                        inProgress = false;
                    });
        }
    }


    $('#load-more').click(function () {
        loadMore();
    });
    
    $(window).scroll(function () {
        clearTimeout($.data(this, 'scrollTimer'));
        $.data(this, 'scrollTimer', setTimeout(function () {
            var el = document.getElementById('load-more');
            var elemTop = el.getBoundingClientRect().top;
            var elemBottom = el.getBoundingClientRect().bottom;

            var isVisible = (elemTop >= 0) && (elemBottom - 900 <= window.innerHeight);
            if ($('#load-more').length && isVisible) {
                loadMore();
            }
        }, 250));
    });
</script>

<script src="~/Scripts/users-index.js"></script>